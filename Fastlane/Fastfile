# frozen_string_literal: true

require_relative 'configuration'

default_platform :ios

# rubocop:disable Metrics/BlockLength
platform :ios do
  before_all do
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '600'
  end

  desc 'Runs all the tests'
  lane :unit do
    unit_test
    convert_coverage
  end

  desc 'Builds alpha configuration'
  lane :alpha do
    setup_ci
    deploy
  end

  private_lane :deploy do
    sign
    update_build_number
    build
    app_store
  end

  private_lane :unit_test do
    scan(
      scheme: configuration.app_scheme,
      devices: configuration.scan_devices,
      ensure_devices_found: true,
      prelaunch_simulator: true,
      xcodebuild_formatter: 'xcbeautify',
      output_types: 'junit',
      derived_data_path: './build_for_unit_testing',
      output_directory: configuration.app_output_directory,
      code_coverage: true
    )
  end

  private_lane :build do |options|
    gym(
      workspace: configuration.app_workspace,
      scheme: configuration.app_scheme,
      configuration: configuration.app_configuration,
      output_directory: configuration.app_output_directory,
      clean: options[:clean].nil? ? true : options[:clean],
      skip_profile_detection: true,
      export_method: configuration.app_export_method,
      export_options: configuration.app_export_options,
      xcargs: configuration.app_args
    )
  end

  desc 'Download profiles'
  lane :sign do
    match(
      type: configuration.match_method,
      app_identifier: configuration.match_identifiers,
      readonly: true,
      git_branch: 'main',
      api_key: app_store_key,
      git_basic_authorization: configuration.match_certificate_token
    )
  end

  private_lane :convert_coverage do
    sh(
      "../Scripts/xccov-to-sonarqube-generic.sh \
      #{lane_context[SharedValues::SCAN_GENERATED_XCRESULT_PATH]} \
      >../#{configuration.app_output_directory}/sonarqube-generic-coverage.xml"
    )
    # slather(
    #   build_directory: configuration.app_output_directory,
    #   output_directory: configuration.app_output_directory,
    #   sonarqube_xml: true,
    #   scheme: configuration.app_scheme,
    #   proj: configuration.app_project,
    #   workspace: configuration.app_workspace
    # )
  end

  private_lane :update_build_number do
    increment_build_number(
      build_number: fetch_build_number_from_testflight + 1
    )
  end

  private_lane :fetch_build_number_from_testflight do
    latest_testflight_build_number(
      api_key: app_store_key,
      app_identifier: configuration.app_bundle_identifier
    )
  end

  private_lane :app_store do
    pilot(
      app_identifier: configuration.app_bundle_identifier,
      distribute_external: true,
      notify_external_testers: true,
      expire_previous_builds: false,
      groups: configuration.deliver_groups,
      changelog: 'Automated internal build',
      api_key: app_store_key
    )
  end
end

def app_store_key
  app_store_connect_api_key(
    key_id: configuration.deliver_key_id,
    issuer_id: configuration.deliver_key_issuer_id,
    key_content: configuration.deliver_key_content,
    is_key_content_base64: true,
    in_house: false
  )
end

def configuration
  @configuration ||= Configuration.new(
    lane_context[SharedValues::LANE_NAME],
    '.build.yml'
  )
end
# rubocop:enable Metrics/BlockLength
